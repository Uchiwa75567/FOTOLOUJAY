// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password      String
  refreshToken  String?   // Nouveau champ pour refresh token
  phone         String?   // Numéro de téléphone
  address       String?   // Adresse
  role          Role      @default(USER)
  premiumExpiry DateTime? // Date d'expiration du premium
  products      Product[]
  paymentTransactions PaymentTransaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  photoUrl       String
  status         Status    @default(PENDING)
  views          Int       @default(0)
  vip            Boolean   @default(false)
  rejectionReason String?  // Raison de rejet par l'IA
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model PaymentTransaction {
  id          Int      @id @default(autoincrement())
  refCommand  String   @unique
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  packId      String
  amount      Int
  status      PaymentStatus @default(PENDING)
  token       String   @unique
  createdAt   DateTime @default(now())
  completedAt DateTime?
}

enum Role {
  USER
  VIP
  MODERATOR
  ADMIN

}

enum Status {
  PENDING
  VALID
  DELETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
